/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package huffmanencoder;

import com.github.jinahya.bit.io.BitInputFactory;
import com.github.jinahya.bit.io.BitOutput;
import com.github.jinahya.bit.io.BitOutputFactory;
import huffmantree.HuffmanTreeModel;
import huffmantree.HuffmanTreeNode;
import java.awt.Component;
import java.awt.Font;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.JTree;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author eco
 */
public class HuffmanEncoder extends javax.swing.JFrame {
	private HuffmanTreeModel huffmanTreeModel;

	/**
	 * Creates new form HuffmanEncode
	 */
	public HuffmanEncoder() {
		initComponents();
		huffmanTreeModel = new HuffmanTreeModel();

		textFileChooser.setFileFilter(new FileNameExtensionFilter("Text file", "txt"));
		compressedFileChooser.setFileFilter(new FileNameExtensionFilter("Huffman Compressed File", "huff"));
		compressedOpenChooser.setFileFilter(new FileNameExtensionFilter("Huffman Compressed File", "huff"));

		huffmanTree.setModel(huffmanTreeModel);
		huffmanTree.setCellRenderer(new DefaultTreeCellRenderer() {
			@Override
			public Component getTreeCellRendererComponent(
				JTree tree,
				Object value,
				boolean sel,
				boolean expanded,
				boolean leaf,
				int row,
				boolean hasFocus) {
				var node = (HuffmanTreeNode) value;

				if (leaf) {
					setIcon(UIManager.getIcon("Tree.leafIcon"));
					setText(node.toString());
					setFont(new Font("sansserif", Font.ITALIC, 13)); 
				} else if (expanded) {
					setIcon(UIManager.getIcon("Tree.openIcon"));
					setText(String.format("(%s) %s", node.getRepresentationString(), node.toString()));
					setFont(new Font("sansserif", Font.PLAIN, 13)); 
				} else {
					setIcon(UIManager.getIcon("Tree.closedIcon"));
					var text = String.join(", ", node.getCharacters());
					setText(String.format("(%s) %s", text, node.toString()));
					setFont(new Font("sansserif", Font.BOLD, 13));
				}

				return this;
			}
		});

		editorText.getDocument().addDocumentListener(new DocumentListener() {
			@Override
			public void insertUpdate(DocumentEvent de) {
				changedUpdate(de);
			}

			@Override
			public void removeUpdate(DocumentEvent de) {
				changedUpdate(de);
			}

			@Override
			public void changedUpdate(DocumentEvent de) {
				var document = de.getDocument();
				int length = document.getLength();
				try {
					var text = document.getText(0, length);
					huffmanTreeModel.setText(text);
					for (int i = 0; i < huffmanTree.getRowCount(); ++i) {
						huffmanTree.expandRow(i);
					}
					var originalSize = text.getBytes("UTF-8").length;
					originalSizeText.setText(originalSize + "");

					var compressedSize = huffmanTreeModel.getSize() / 8;
					compressedSizeText.setText(compressedSize + "");

					var compressionRate = ((float) compressedSize) / ((float) originalSize) * 100.0;
					compressionRateText.setText(String.format("%.2f%%", compressionRate));
				} catch (BadLocationException ex) {
					Logger.getLogger(HuffmanEncoder.class.getName()).log(Level.SEVERE, null, ex);
				} catch (UnsupportedEncodingException ex) {
					Logger.getLogger(HuffmanEncoder.class.getName()).log(Level.SEVERE, null, ex);
				}
			}

		});
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                textFileChooser = new javax.swing.JFileChooser();
                compressedFileChooser = new javax.swing.JFileChooser();
                compressedOpenChooser = new javax.swing.JFileChooser();
                javax.swing.JPanel textEditorPanel = new javax.swing.JPanel();
                javax.swing.JScrollPane textEditorScroll = new javax.swing.JScrollPane();
                editorText = new javax.swing.JTextArea();
                javax.swing.JPanel detailsPanel = new javax.swing.JPanel();
                javax.swing.JLabel originalSizeLabel = new javax.swing.JLabel();
                javax.swing.JLabel compressedSizeLabel = new javax.swing.JLabel();
                javax.swing.JLabel compretionRateLabel = new javax.swing.JLabel();
                javax.swing.JSeparator detailSeperator = new javax.swing.JSeparator();
                originalSizeText = new javax.swing.JTextField();
                compressedSizeText = new javax.swing.JTextField();
                compressionRateText = new javax.swing.JTextField();
                javax.swing.JPanel huffmanTreePanel = new javax.swing.JPanel();
                javax.swing.JScrollPane huffmanTreeScroll = new javax.swing.JScrollPane();
                huffmanTree = new javax.swing.JTree();
                menuBar = new javax.swing.JMenuBar();
                javax.swing.JMenu fileMenu = new javax.swing.JMenu();
                openTextFileItem = new javax.swing.JMenuItem();
                openCompressedFileItem = new javax.swing.JMenuItem();
                jSeparator1 = new javax.swing.JPopupMenu.Separator();
                compressFileItem = new javax.swing.JMenuItem();
                javax.swing.JMenu jMenu2 = new javax.swing.JMenu();

                textFileChooser.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                textFileOpened(evt);
                        }
                });

                compressedFileChooser.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                compressFileExport(evt);
                        }
                });

                compressedOpenChooser.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                compressedOpen(evt);
                        }
                });

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                setTitle("Huffman Encoder");

                textEditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Text Editor"));
                textEditorPanel.setMinimumSize(new java.awt.Dimension(325, 26));
                textEditorPanel.setLayout(new java.awt.BorderLayout());

                editorText.setColumns(20);
                editorText.setLineWrap(true);
                editorText.setRows(5);
                editorText.setWrapStyleWord(true);
                textEditorScroll.setViewportView(editorText);

                textEditorPanel.add(textEditorScroll, java.awt.BorderLayout.CENTER);

                detailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));

                originalSizeLabel.setLabelFor(originalSizeText);
                originalSizeLabel.setText("Original Size:");

                compressedSizeLabel.setLabelFor(compressedSizeText);
                compressedSizeLabel.setText("Compresed Size:");

                compretionRateLabel.setLabelFor(compressionRateText);
                compretionRateLabel.setText("Compression Rate:");

                originalSizeText.setEditable(false);
                originalSizeText.setText("0");
                originalSizeText.setMaximumSize(new java.awt.Dimension(65, 2147483647));
                originalSizeText.setMinimumSize(new java.awt.Dimension(65, 23));

                compressedSizeText.setEditable(false);
                compressedSizeText.setText("0");

                compressionRateText.setEditable(false);
                compressionRateText.setText("0");
                compressionRateText.setToolTipText("");

                javax.swing.GroupLayout detailsPanelLayout = new javax.swing.GroupLayout(detailsPanel);
                detailsPanel.setLayout(detailsPanelLayout);
                detailsPanelLayout.setHorizontalGroup(
                        detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(detailsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(detailSeperator, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailsPanelLayout.createSequentialGroup()
                                                .addComponent(compressedSizeLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(compressedSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailsPanelLayout.createSequentialGroup()
                                                .addComponent(originalSizeLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(originalSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailsPanelLayout.createSequentialGroup()
                                                .addComponent(compretionRateLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(compressionRateText, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
                );
                detailsPanelLayout.setVerticalGroup(
                        detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(detailsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(originalSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(originalSizeLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(compressedSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(compressedSizeLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(detailSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(compretionRateLabel)
                                        .addComponent(compressionRateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                );

                huffmanTreePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Huffman Tree"));
                huffmanTreePanel.setMinimumSize(new java.awt.Dimension(120, 0));

                huffmanTreeScroll.setViewportView(huffmanTree);

                javax.swing.GroupLayout huffmanTreePanelLayout = new javax.swing.GroupLayout(huffmanTreePanel);
                huffmanTreePanel.setLayout(huffmanTreePanelLayout);
                huffmanTreePanelLayout.setHorizontalGroup(
                        huffmanTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(huffmanTreePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(huffmanTreeScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                                .addContainerGap())
                );
                huffmanTreePanelLayout.setVerticalGroup(
                        huffmanTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(huffmanTreePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(huffmanTreeScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                                .addContainerGap())
                );

                fileMenu.setText("File");

                openTextFileItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
                openTextFileItem.setIcon(UIManager.getIcon("FileView.fileIcon"));
                openTextFileItem.setText("Open text file");
                openTextFileItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                openTextFileItemActionPerformed(evt);
                        }
                });
                fileMenu.add(openTextFileItem);

                openCompressedFileItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
                openCompressedFileItem.setIcon(UIManager.getIcon("FileView.hardDriveIcon")
                );
                openCompressedFileItem.setText("Open compresed file");
                openCompressedFileItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                openCompressedFileItemActionPerformed(evt);
                        }
                });
                fileMenu.add(openCompressedFileItem);
                fileMenu.add(jSeparator1);

                compressFileItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
                compressFileItem.setIcon(UIManager.getIcon("FileView.floppyDriveIcon")
                );
                compressFileItem.setText("Compress file");
                compressFileItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                compressFileItemActionPerformed(evt);
                        }
                });
                fileMenu.add(compressFileItem);

                menuBar.add(fileMenu);

                jMenu2.setText("Edit");
                menuBar.add(jMenu2);

                setJMenuBar(menuBar);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(textEditorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(detailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(huffmanTreePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(textEditorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(detailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(huffmanTreePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

        private void openTextFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTextFileItemActionPerformed
		textFileChooser.showOpenDialog(this);
        }//GEN-LAST:event_openTextFileItemActionPerformed

        private void textFileOpened(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFileOpened

		try {
			var file = textFileChooser.getSelectedFile();
			var content = new Scanner(file).useDelimiter("\\Z").next();
			editorText.setText(content);
		} catch (FileNotFoundException ex) {
			Logger.getLogger(HuffmanEncoder.class.getName()).log(Level.SEVERE, null, ex);
		}

        }//GEN-LAST:event_textFileOpened

        private void compressFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressFileItemActionPerformed
		compressedFileChooser.showSaveDialog(this);
        }//GEN-LAST:event_compressFileItemActionPerformed

        private void openCompressedFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCompressedFileItemActionPerformed
		compressedOpenChooser.showOpenDialog(this);
        }//GEN-LAST:event_openCompressedFileItemActionPerformed

        private void compressFileExport(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressFileExport
		FileOutputStream stream = null;
		try {
			var file = compressedFileChooser.getSelectedFile();
			stream = new FileOutputStream(file);
			BitOutput out = BitOutputFactory.from(stream);

			huffmanTreeModel.encodeTree(out);

			var document = editorText.getDocument();
			var length = document.getLength();
			huffmanTreeModel.encode(out, document.getText(0, length));
		} catch (FileNotFoundException ex) {
			Logger.getLogger(HuffmanEncoder.class.getName()).log(Level.SEVERE, null, ex);
		} catch (BadLocationException | IOException ex) {
			Logger.getLogger(HuffmanEncoder.class.getName()).log(Level.SEVERE, null, ex);
		} finally {
			try {
				stream.close();
			} catch (IOException ex) {
				Logger.getLogger(HuffmanEncoder.class.getName()).log(Level.SEVERE, null, ex);
			}
		}


        }//GEN-LAST:event_compressFileExport

        private void compressedOpen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressedOpen
		FileInputStream stream = null;
		try {
			var file = compressedOpenChooser.getSelectedFile();
			stream = new FileInputStream(file);
			var in = BitInputFactory.from(stream);

			HuffmanTreeNode root = null;
			try {
				root = HuffmanTreeModel.readTree(in);
			} catch (IOException ex) {
				Logger.getLogger(HuffmanEncoder.class.getName()).log(Level.SEVERE, null, ex);
			}

			String acc = "";
			Character c;
			while ((c = root.decode(in)) != null) {
				acc += c;
			}
			editorText.setText(acc);

		} catch (FileNotFoundException ex) {
			Logger.getLogger(HuffmanEncoder.class.getName()).log(Level.SEVERE, null, ex);
		} finally {
			try {
				stream.close();
			} catch (IOException ex) {
				Logger.getLogger(HuffmanEncoder.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
        }//GEN-LAST:event_compressedOpen

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new HuffmanEncoder().setVisible(true);
			}
		});
	}

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JMenuItem compressFileItem;
        private javax.swing.JFileChooser compressedFileChooser;
        private javax.swing.JFileChooser compressedOpenChooser;
        private javax.swing.JTextField compressedSizeText;
        private javax.swing.JTextField compressionRateText;
        private javax.swing.JTextArea editorText;
        private javax.swing.JTree huffmanTree;
        private javax.swing.JPopupMenu.Separator jSeparator1;
        private javax.swing.JMenuBar menuBar;
        private javax.swing.JMenuItem openCompressedFileItem;
        private javax.swing.JMenuItem openTextFileItem;
        private javax.swing.JTextField originalSizeText;
        private javax.swing.JFileChooser textFileChooser;
        // End of variables declaration//GEN-END:variables
}
